{"ast":null,"code":"var _jsxFileName = \"/Users/nickhuemmer/projects/blog-platform/client/src/pages/PostDetailPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostDetailPage() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    // Fetch the blog post details\n    fetch(`/api/posts/${id}`).then(response => response.json()).then(data => setPost(data.post)).catch(error => console.error('Error fetching post data:', error));\n\n    // Fetch the comments for this post\n    fetch(`/api/comments/post/${id}`).then(response => response.json()).then(data => setComments(data.comments)).catch(error => console.error('Error fetching comments:', error));\n  }, [id]);\n  const handleCommentSubmit = e => {\n    e.preventDefault();\n\n    // Post the new comment to the server\n    fetch('/api/comments', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        post_id: id,\n        author_id: 1,\n        // Replace with the actual logged-in user ID\n        content: newComment\n      })\n    }).then(response => response.json()).then(data => {\n      setComments([...comments, data.comment]);\n      setNewComment('');\n    }).catch(error => console.error('Error posting comment:', error));\n  };\n  if (!post) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading post...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"post-detail-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Author ID: \", post.author_id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), comments.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          children: [\"Comment by User ID: \", comment.author_id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 29\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No comments yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCommentSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment,\n        onChange: e => setNewComment(e.target.value),\n        placeholder: \"Add a comment\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(PostDetailPage, \"vYcnaA+MtnxynjUJ4gBxZblTQco=\", false, function () {\n  return [useParams];\n});\n_c = PostDetailPage;\nexport default PostDetailPage;\nvar _c;\n$RefreshReg$(_c, \"PostDetailPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","PostDetailPage","_s","id","post","setPost","comments","setComments","newComment","setNewComment","fetch","then","response","json","data","catch","error","console","handleCommentSubmit","e","preventDefault","method","headers","body","JSON","stringify","post_id","author_id","content","comment","children","fileName","_jsxFileName","lineNumber","columnNumber","className","title","length","map","onSubmit","value","onChange","target","placeholder","required","type","_c","$RefreshReg$"],"sources":["/Users/nickhuemmer/projects/blog-platform/client/src/pages/PostDetailPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nfunction PostDetailPage() {\n    const { id } = useParams();\n    const [post, setPost] = useState(null);\n    const [comments, setComments] = useState([]);\n    const [newComment, setNewComment] = useState('');\n\n    useEffect(() => {\n        // Fetch the blog post details\n        fetch(`/api/posts/${id}`)\n            .then(response => response.json())\n            .then(data => setPost(data.post))\n            .catch(error => console.error('Error fetching post data:', error));\n\n        // Fetch the comments for this post\n        fetch(`/api/comments/post/${id}`)\n            .then(response => response.json())\n            .then(data => setComments(data.comments))\n            .catch(error => console.error('Error fetching comments:', error));\n    }, [id]);\n\n    const handleCommentSubmit = (e) => {\n        e.preventDefault();\n\n        // Post the new comment to the server\n        fetch('/api/comments', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                post_id: id,\n                author_id: 1, // Replace with the actual logged-in user ID\n                content: newComment,\n            }),\n        })\n        .then(response => response.json())\n        .then(data => {\n            setComments([...comments, data.comment]);\n            setNewComment('');\n        })\n        .catch(error => console.error('Error posting comment:', error));\n    };\n\n    if (!post) {\n        return <div>Loading post...</div>;\n    }\n\n    return (\n        <div className=\"post-detail-container\">\n            <h1>{post.title}</h1>\n            <p>{post.content}</p>\n            <p>Author ID: {post.author_id}</p>\n\n            <h2>Comments</h2>\n            {comments.length > 0 ? (\n                <ul>\n                    {comments.map(comment => (\n                        <li key={comment.id}>\n                            <p>{comment.content}</p>\n                            <small>Comment by User ID: {comment.author_id}</small>\n                        </li>\n                    ))}\n                </ul>\n            ) : (\n                <p>No comments yet.</p>\n            )}\n\n            <form onSubmit={handleCommentSubmit}>\n                <textarea\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    placeholder=\"Add a comment\"\n                    required\n                />\n                <button type=\"submit\">Submit Comment</button>\n            </form>\n        </div>\n    );\n}\n\nexport default PostDetailPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}